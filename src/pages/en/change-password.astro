---
import { FaKey } from "react-icons/fa6";
import Navigation from "../../components/Fundamentales/Navigation.astro";
import Layout from "../../layouts/Layout.astro";
import { getLangFromUrl } from "../../i18n/utils";
const lang = getLangFromUrl(Astro.url);
const { cookies, redirect } = Astro;
const resetToken = cookies.get("resetToken");
console.log(resetToken);
if (!resetToken) {
  return redirect(`/${lang}/`);
}
---

<Layout title="Cambiar contraseña">
  <Navigation />
  <main class="min-h-screen py-4 bg-zinc-100 dark:bg-zinc-900 font-Rubik">
    <section
      class="bg-zinc-800 rounded-lg container mx-auto w-full sm:w-2/3 lg:w-1/2 flex flex-col p-2"
    >
      <h2 class="text-center text-2xl md:text-3xl font-bold">
        Change Password
      </h2>
      <span class="flex justify-center text-2xl md:text-3xl text-cyan-300 my-4">
        <FaKey />
      </span>
      <form id="changePasswordForm" class="flex flex-col">
        <label for="newPassword">New Password:</label>
        <input
          placeholder="******"
          class="dark:bg-zinc-900 p-1 rounded outline-none focus:ring-2 focus:ring-red-500"
          type="password"
          id="newPassword"
          name="newPassword"
          required
        />
        <label for="confirmPassword">Repeat new password:</label>
        <input
          placeholder="******"
          class="dark:bg-zinc-900 p-1 rounded outline-none focus:ring-2 focus:ring-red-500"
          type="password"
          id="confirmPassword"
          name="confirmPassword"
          required
        />
        <button
          id="changePasswordBtn"
          class="bg-cyan-600 py-1 my-2 rounded disabled:bg-cyan-800"
          type="submit">Change Password</button
        >
      </form>
      <div
        id="messageDiv"
        class="hidden mx-4 my-2 p-2 text-center rounded bg-sky-700 border border-sky-400"
      >
        <p id="message">Help message or server response</p>
      </div>
    </section>
  </main>
</Layout>

<script>
  import { supabase } from "../../lib/supabase";
  window.onload = () => {
    supabase.auth.onAuthStateChange(async (event, session) => {
      console.log(event);
      console.log(session);
      if (event == "PASSWORD_RECOVERY") {
        document
          .getElementById("changePasswordForm")
          ?.addEventListener("submit", async (e) => {
            e.preventDefault();

            const btn = document.getElementById(
              "changePasswordBtn"
            ) as HTMLButtonElement;
            btn.disabled = true; // Deshabilitar el botón

            const newPasswordInput = document.getElementById(
              "newPassword"
            ) as HTMLInputElement;
            const confirmPasswordInput = document.getElementById(
              "confirmPassword"
            ) as HTMLInputElement;

            const newPassword = newPasswordInput.value.trim();
            const confirmPassword = confirmPasswordInput.value.trim();

            // Validar que la contraseña tenga al menos 6 caracteres
            if (newPassword.length < 6) {
              showMessage("La contraseña debe tener al menos 6 caracteres.");
              btn.disabled = false; // Habilitar el botón nuevamente
              return; // Salir de la función si la validación falla
            }

            // Validar que las contraseñas coincidan
            if (newPassword !== confirmPassword) {
              showMessage("Las contraseñas no coinciden.");
              btn.disabled = false; // Habilitar el botón nuevamente
              return; // Salir de la función si la validación falla
            }

            const { data, error } = await supabase.auth.updateUser({
              password: newPassword || "",
            });

            if (data) {
              showMessage("Contraseña cambiada correctamente");
              deleteCookie("resetToken");
            }
            if (error) {
              showMessage("Error al cambiar la contraseña");
            }
          });

        function showMessage(message: any) {
          const messageDiv = document.getElementById("messageDiv");
          const messageElement = document.getElementById("message");
          if (messageDiv && messageElement) {
            messageElement.textContent = message;
            messageDiv.classList.remove("hidden");
          }
        }

        // Función para eliminar una cookie
        function deleteCookie(name: any) {
          document.cookie = `${name}=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;`;
        }
      }
    });
  };
</script>
