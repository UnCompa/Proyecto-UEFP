---
import { Image } from "astro:assets";
import DocsLayout from "./DocsLayout.astro";
import { getLangFromUrl } from "../i18n/utils";
import { FaLink } from "react-icons/fa";
import { Toaster } from "sonner";
const { frontmatter, slug } = Astro.props;
const tags = frontmatter.tags;
const lang = getLangFromUrl(Astro.url);
const url = Astro.url.origin;
console.log(frontmatter);
---

<DocsLayout
  pageTitle={`${frontmatter.title} â€¢ ${frontmatter.author}`}
  data={frontmatter}
  icon={frontmatter.icon}
>
  <h1
    id="clipboard-text"
    data-clipboard-text={`${url}/${lang}/docs/${slug}`}
    class="text-center cursor-pointer"
    aria-label={frontmatter.title}
  >
    {frontmatter.title}
  </h1>
  <Image
    id="cover-img"
    class="shadow-2xl shadow-red-500/10 mb-4 aspect-video"
    src={frontmatter.image.url}
    alt={frontmatter.image.alt}
    height={52}
    width={100}
    quality={"low"}
    transition:animate="fade"
    transition:name={`imagen-${frontmatter.image.url}`}
  />
  <div class="bg-zinc-100 dark:bg-zinc-900/50 my-2 p-4 rounded">
    <div class="flex items-center justify-between font-light">
      <div class="flex items-center gap-x-2">
        <img
          src={frontmatter.avatar ||
            "https://static.vecteezy.com/system/resources/thumbnails/005/545/335/small/user-sign-icon-person-symbol-human-avatar-isolated-on-white-backogrund-vector.jpg"}
          alt="Avatar del creador"
          class="h-12 w-12 object-cover rounded-full border border-black dark:border-white p-0.5"
        />
        <p>
          Realizado por: <span class="text-red-600 dark:text-red-200"
            >{frontmatter.author}</span
          >
        </p>
      </div>
      <div>
        <p class="text-zinc-800 dark:text-zinc-300">
          Hecho: {frontmatter.pubDate.toString().slice(0, 10)}
        </p>
      </div>
    </div>
    <span class="text-xs dark:text-zinc-500"
      >{lang === "es" ? "Descripcion:" : "Description:"}</span
    >
    <p class="font-bold">{frontmatter.description}</p>
    <span class="text-xs dark:text-zinc-500"
      >{lang === "es" ? "Etiquetas: " : "Tags: "}</span
    >
    <div class="flex flex-wrap gap-x-2">
      {
        tags.map((tag: any) => {
          return (
            <a
              href={`/${lang}/tags/${tag}`}
              class="text-sm font-light text-black dark:text-white bg-zinc-200 dark:bg-zinc-950 p-1 rounded no-underline hover:bg-zinc-300 dark:hover:bg-black"
            >
              {tag}
            </a>
          );
        })
      }
    </div>
  </div>
  <Toaster toastOptions={{
    style: {
      padding: "1em",
      display: "flex",
      alignItems: "center",
      justifyContent: "center"
    },
    unstyled: true,
    classNames: {
      toast: "bg-zinc-200 dark:bg-zinc-900",
      title: "text-black dark:text-white",
      description: "text-black dark:text-white",
      actionButton: "bg-zinc-200 dark:bg-zinc-900",
      cancelButton: "bg-zinc-200 dark:bg-zinc-900",
      closeButton: "bg-zinc-200 dark:bg-zinc-900",
      success: "bg-green-500 text-green-500"
    }
  }} client:load />
  <slot />
</DocsLayout>
<script src="../scripts/MarkdownToast.js"></script>
